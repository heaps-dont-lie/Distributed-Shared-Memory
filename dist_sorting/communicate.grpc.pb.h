// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: communicate.proto
#ifndef GRPC_communicate_2eproto__INCLUDED
#define GRPC_communicate_2eproto__INCLUDED

#include "communicate.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace communicate {

// Defines the service
class DistributedSystemsService final {
 public:
  static constexpr char const* service_full_name() {
    return "communicate.DistributedSystemsService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Distributed Mutual Exclusion Services
    virtual ::grpc::Status recv_request(::grpc::ClientContext* context, const ::communicate::ReqLock& request, ::communicate::Ack* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::communicate::Ack>> Asyncrecv_request(::grpc::ClientContext* context, const ::communicate::ReqLock& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::communicate::Ack>>(Asyncrecv_requestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::communicate::Ack>> PrepareAsyncrecv_request(::grpc::ClientContext* context, const ::communicate::ReqLock& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::communicate::Ack>>(PrepareAsyncrecv_requestRaw(context, request, cq));
    }
    virtual ::grpc::Status recv_reply(::grpc::ClientContext* context, const ::communicate::Ack& request, ::communicate::Ack* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::communicate::Ack>> Asyncrecv_reply(::grpc::ClientContext* context, const ::communicate::Ack& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::communicate::Ack>>(Asyncrecv_replyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::communicate::Ack>> PrepareAsyncrecv_reply(::grpc::ClientContext* context, const ::communicate::Ack& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::communicate::Ack>>(PrepareAsyncrecv_replyRaw(context, request, cq));
    }
    virtual ::grpc::Status roll_call(::grpc::ClientContext* context, const ::communicate::Ack& request, ::communicate::Ack* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::communicate::Ack>> Asyncroll_call(::grpc::ClientContext* context, const ::communicate::Ack& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::communicate::Ack>>(Asyncroll_callRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::communicate::Ack>> PrepareAsyncroll_call(::grpc::ClientContext* context, const ::communicate::Ack& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::communicate::Ack>>(PrepareAsyncroll_callRaw(context, request, cq));
    }
    // Distributed Shared Memory Services
    virtual ::grpc::Status recv_page_req(::grpc::ClientContext* context, const ::communicate::Ack& request, ::communicate::Ack* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::communicate::Ack>> Asyncrecv_page_req(::grpc::ClientContext* context, const ::communicate::Ack& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::communicate::Ack>>(Asyncrecv_page_reqRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::communicate::Ack>> PrepareAsyncrecv_page_req(::grpc::ClientContext* context, const ::communicate::Ack& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::communicate::Ack>>(PrepareAsyncrecv_page_reqRaw(context, request, cq));
    }
    virtual ::grpc::Status recv_var_node(::grpc::ClientContext* context, const ::communicate::Var_Ds_Info& request, ::communicate::Ack* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::communicate::Ack>> Asyncrecv_var_node(::grpc::ClientContext* context, const ::communicate::Var_Ds_Info& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::communicate::Ack>>(Asyncrecv_var_nodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::communicate::Ack>> PrepareAsyncrecv_var_node(::grpc::ClientContext* context, const ::communicate::Var_Ds_Info& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::communicate::Ack>>(PrepareAsyncrecv_var_nodeRaw(context, request, cq));
    }
    virtual ::grpc::Status recv_state_trans_dirn_req(::grpc::ClientContext* context, const ::communicate::Node_state_info& request, ::communicate::GetInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::communicate::GetInfo>> Asyncrecv_state_trans_dirn_req(::grpc::ClientContext* context, const ::communicate::Node_state_info& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::communicate::GetInfo>>(Asyncrecv_state_trans_dirn_reqRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::communicate::GetInfo>> PrepareAsyncrecv_state_trans_dirn_req(::grpc::ClientContext* context, const ::communicate::Node_state_info& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::communicate::GetInfo>>(PrepareAsyncrecv_state_trans_dirn_reqRaw(context, request, cq));
    }
    virtual ::grpc::Status recv_state_trans_node_req(::grpc::ClientContext* context, const ::communicate::Node_state_info& request, ::communicate::GetInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::communicate::GetInfo>> Asyncrecv_state_trans_node_req(::grpc::ClientContext* context, const ::communicate::Node_state_info& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::communicate::GetInfo>>(Asyncrecv_state_trans_node_reqRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::communicate::GetInfo>> PrepareAsyncrecv_state_trans_node_req(::grpc::ClientContext* context, const ::communicate::Node_state_info& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::communicate::GetInfo>>(PrepareAsyncrecv_state_trans_node_reqRaw(context, request, cq));
    }
    virtual ::grpc::Status recv_ack_wait_dirn(::grpc::ClientContext* context, const ::communicate::Node_state_info& request, ::communicate::Ack* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::communicate::Ack>> Asyncrecv_ack_wait_dirn(::grpc::ClientContext* context, const ::communicate::Node_state_info& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::communicate::Ack>>(Asyncrecv_ack_wait_dirnRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::communicate::Ack>> PrepareAsyncrecv_ack_wait_dirn(::grpc::ClientContext* context, const ::communicate::Node_state_info& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::communicate::Ack>>(PrepareAsyncrecv_ack_wait_dirnRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Distributed Mutual Exclusion Services
      virtual void recv_request(::grpc::ClientContext* context, const ::communicate::ReqLock* request, ::communicate::Ack* response, std::function<void(::grpc::Status)>) = 0;
      virtual void recv_request(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::communicate::Ack* response, std::function<void(::grpc::Status)>) = 0;
      virtual void recv_reply(::grpc::ClientContext* context, const ::communicate::Ack* request, ::communicate::Ack* response, std::function<void(::grpc::Status)>) = 0;
      virtual void recv_reply(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::communicate::Ack* response, std::function<void(::grpc::Status)>) = 0;
      virtual void roll_call(::grpc::ClientContext* context, const ::communicate::Ack* request, ::communicate::Ack* response, std::function<void(::grpc::Status)>) = 0;
      virtual void roll_call(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::communicate::Ack* response, std::function<void(::grpc::Status)>) = 0;
      // Distributed Shared Memory Services
      virtual void recv_page_req(::grpc::ClientContext* context, const ::communicate::Ack* request, ::communicate::Ack* response, std::function<void(::grpc::Status)>) = 0;
      virtual void recv_page_req(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::communicate::Ack* response, std::function<void(::grpc::Status)>) = 0;
      virtual void recv_var_node(::grpc::ClientContext* context, const ::communicate::Var_Ds_Info* request, ::communicate::Ack* response, std::function<void(::grpc::Status)>) = 0;
      virtual void recv_var_node(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::communicate::Ack* response, std::function<void(::grpc::Status)>) = 0;
      virtual void recv_state_trans_dirn_req(::grpc::ClientContext* context, const ::communicate::Node_state_info* request, ::communicate::GetInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void recv_state_trans_dirn_req(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::communicate::GetInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void recv_state_trans_node_req(::grpc::ClientContext* context, const ::communicate::Node_state_info* request, ::communicate::GetInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void recv_state_trans_node_req(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::communicate::GetInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void recv_ack_wait_dirn(::grpc::ClientContext* context, const ::communicate::Node_state_info* request, ::communicate::Ack* response, std::function<void(::grpc::Status)>) = 0;
      virtual void recv_ack_wait_dirn(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::communicate::Ack* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::communicate::Ack>* Asyncrecv_requestRaw(::grpc::ClientContext* context, const ::communicate::ReqLock& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::communicate::Ack>* PrepareAsyncrecv_requestRaw(::grpc::ClientContext* context, const ::communicate::ReqLock& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::communicate::Ack>* Asyncrecv_replyRaw(::grpc::ClientContext* context, const ::communicate::Ack& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::communicate::Ack>* PrepareAsyncrecv_replyRaw(::grpc::ClientContext* context, const ::communicate::Ack& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::communicate::Ack>* Asyncroll_callRaw(::grpc::ClientContext* context, const ::communicate::Ack& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::communicate::Ack>* PrepareAsyncroll_callRaw(::grpc::ClientContext* context, const ::communicate::Ack& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::communicate::Ack>* Asyncrecv_page_reqRaw(::grpc::ClientContext* context, const ::communicate::Ack& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::communicate::Ack>* PrepareAsyncrecv_page_reqRaw(::grpc::ClientContext* context, const ::communicate::Ack& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::communicate::Ack>* Asyncrecv_var_nodeRaw(::grpc::ClientContext* context, const ::communicate::Var_Ds_Info& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::communicate::Ack>* PrepareAsyncrecv_var_nodeRaw(::grpc::ClientContext* context, const ::communicate::Var_Ds_Info& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::communicate::GetInfo>* Asyncrecv_state_trans_dirn_reqRaw(::grpc::ClientContext* context, const ::communicate::Node_state_info& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::communicate::GetInfo>* PrepareAsyncrecv_state_trans_dirn_reqRaw(::grpc::ClientContext* context, const ::communicate::Node_state_info& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::communicate::GetInfo>* Asyncrecv_state_trans_node_reqRaw(::grpc::ClientContext* context, const ::communicate::Node_state_info& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::communicate::GetInfo>* PrepareAsyncrecv_state_trans_node_reqRaw(::grpc::ClientContext* context, const ::communicate::Node_state_info& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::communicate::Ack>* Asyncrecv_ack_wait_dirnRaw(::grpc::ClientContext* context, const ::communicate::Node_state_info& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::communicate::Ack>* PrepareAsyncrecv_ack_wait_dirnRaw(::grpc::ClientContext* context, const ::communicate::Node_state_info& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status recv_request(::grpc::ClientContext* context, const ::communicate::ReqLock& request, ::communicate::Ack* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::communicate::Ack>> Asyncrecv_request(::grpc::ClientContext* context, const ::communicate::ReqLock& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::communicate::Ack>>(Asyncrecv_requestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::communicate::Ack>> PrepareAsyncrecv_request(::grpc::ClientContext* context, const ::communicate::ReqLock& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::communicate::Ack>>(PrepareAsyncrecv_requestRaw(context, request, cq));
    }
    ::grpc::Status recv_reply(::grpc::ClientContext* context, const ::communicate::Ack& request, ::communicate::Ack* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::communicate::Ack>> Asyncrecv_reply(::grpc::ClientContext* context, const ::communicate::Ack& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::communicate::Ack>>(Asyncrecv_replyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::communicate::Ack>> PrepareAsyncrecv_reply(::grpc::ClientContext* context, const ::communicate::Ack& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::communicate::Ack>>(PrepareAsyncrecv_replyRaw(context, request, cq));
    }
    ::grpc::Status roll_call(::grpc::ClientContext* context, const ::communicate::Ack& request, ::communicate::Ack* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::communicate::Ack>> Asyncroll_call(::grpc::ClientContext* context, const ::communicate::Ack& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::communicate::Ack>>(Asyncroll_callRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::communicate::Ack>> PrepareAsyncroll_call(::grpc::ClientContext* context, const ::communicate::Ack& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::communicate::Ack>>(PrepareAsyncroll_callRaw(context, request, cq));
    }
    ::grpc::Status recv_page_req(::grpc::ClientContext* context, const ::communicate::Ack& request, ::communicate::Ack* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::communicate::Ack>> Asyncrecv_page_req(::grpc::ClientContext* context, const ::communicate::Ack& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::communicate::Ack>>(Asyncrecv_page_reqRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::communicate::Ack>> PrepareAsyncrecv_page_req(::grpc::ClientContext* context, const ::communicate::Ack& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::communicate::Ack>>(PrepareAsyncrecv_page_reqRaw(context, request, cq));
    }
    ::grpc::Status recv_var_node(::grpc::ClientContext* context, const ::communicate::Var_Ds_Info& request, ::communicate::Ack* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::communicate::Ack>> Asyncrecv_var_node(::grpc::ClientContext* context, const ::communicate::Var_Ds_Info& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::communicate::Ack>>(Asyncrecv_var_nodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::communicate::Ack>> PrepareAsyncrecv_var_node(::grpc::ClientContext* context, const ::communicate::Var_Ds_Info& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::communicate::Ack>>(PrepareAsyncrecv_var_nodeRaw(context, request, cq));
    }
    ::grpc::Status recv_state_trans_dirn_req(::grpc::ClientContext* context, const ::communicate::Node_state_info& request, ::communicate::GetInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::communicate::GetInfo>> Asyncrecv_state_trans_dirn_req(::grpc::ClientContext* context, const ::communicate::Node_state_info& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::communicate::GetInfo>>(Asyncrecv_state_trans_dirn_reqRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::communicate::GetInfo>> PrepareAsyncrecv_state_trans_dirn_req(::grpc::ClientContext* context, const ::communicate::Node_state_info& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::communicate::GetInfo>>(PrepareAsyncrecv_state_trans_dirn_reqRaw(context, request, cq));
    }
    ::grpc::Status recv_state_trans_node_req(::grpc::ClientContext* context, const ::communicate::Node_state_info& request, ::communicate::GetInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::communicate::GetInfo>> Asyncrecv_state_trans_node_req(::grpc::ClientContext* context, const ::communicate::Node_state_info& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::communicate::GetInfo>>(Asyncrecv_state_trans_node_reqRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::communicate::GetInfo>> PrepareAsyncrecv_state_trans_node_req(::grpc::ClientContext* context, const ::communicate::Node_state_info& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::communicate::GetInfo>>(PrepareAsyncrecv_state_trans_node_reqRaw(context, request, cq));
    }
    ::grpc::Status recv_ack_wait_dirn(::grpc::ClientContext* context, const ::communicate::Node_state_info& request, ::communicate::Ack* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::communicate::Ack>> Asyncrecv_ack_wait_dirn(::grpc::ClientContext* context, const ::communicate::Node_state_info& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::communicate::Ack>>(Asyncrecv_ack_wait_dirnRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::communicate::Ack>> PrepareAsyncrecv_ack_wait_dirn(::grpc::ClientContext* context, const ::communicate::Node_state_info& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::communicate::Ack>>(PrepareAsyncrecv_ack_wait_dirnRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void recv_request(::grpc::ClientContext* context, const ::communicate::ReqLock* request, ::communicate::Ack* response, std::function<void(::grpc::Status)>) override;
      void recv_request(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::communicate::Ack* response, std::function<void(::grpc::Status)>) override;
      void recv_reply(::grpc::ClientContext* context, const ::communicate::Ack* request, ::communicate::Ack* response, std::function<void(::grpc::Status)>) override;
      void recv_reply(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::communicate::Ack* response, std::function<void(::grpc::Status)>) override;
      void roll_call(::grpc::ClientContext* context, const ::communicate::Ack* request, ::communicate::Ack* response, std::function<void(::grpc::Status)>) override;
      void roll_call(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::communicate::Ack* response, std::function<void(::grpc::Status)>) override;
      void recv_page_req(::grpc::ClientContext* context, const ::communicate::Ack* request, ::communicate::Ack* response, std::function<void(::grpc::Status)>) override;
      void recv_page_req(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::communicate::Ack* response, std::function<void(::grpc::Status)>) override;
      void recv_var_node(::grpc::ClientContext* context, const ::communicate::Var_Ds_Info* request, ::communicate::Ack* response, std::function<void(::grpc::Status)>) override;
      void recv_var_node(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::communicate::Ack* response, std::function<void(::grpc::Status)>) override;
      void recv_state_trans_dirn_req(::grpc::ClientContext* context, const ::communicate::Node_state_info* request, ::communicate::GetInfo* response, std::function<void(::grpc::Status)>) override;
      void recv_state_trans_dirn_req(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::communicate::GetInfo* response, std::function<void(::grpc::Status)>) override;
      void recv_state_trans_node_req(::grpc::ClientContext* context, const ::communicate::Node_state_info* request, ::communicate::GetInfo* response, std::function<void(::grpc::Status)>) override;
      void recv_state_trans_node_req(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::communicate::GetInfo* response, std::function<void(::grpc::Status)>) override;
      void recv_ack_wait_dirn(::grpc::ClientContext* context, const ::communicate::Node_state_info* request, ::communicate::Ack* response, std::function<void(::grpc::Status)>) override;
      void recv_ack_wait_dirn(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::communicate::Ack* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::communicate::Ack>* Asyncrecv_requestRaw(::grpc::ClientContext* context, const ::communicate::ReqLock& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::communicate::Ack>* PrepareAsyncrecv_requestRaw(::grpc::ClientContext* context, const ::communicate::ReqLock& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::communicate::Ack>* Asyncrecv_replyRaw(::grpc::ClientContext* context, const ::communicate::Ack& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::communicate::Ack>* PrepareAsyncrecv_replyRaw(::grpc::ClientContext* context, const ::communicate::Ack& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::communicate::Ack>* Asyncroll_callRaw(::grpc::ClientContext* context, const ::communicate::Ack& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::communicate::Ack>* PrepareAsyncroll_callRaw(::grpc::ClientContext* context, const ::communicate::Ack& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::communicate::Ack>* Asyncrecv_page_reqRaw(::grpc::ClientContext* context, const ::communicate::Ack& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::communicate::Ack>* PrepareAsyncrecv_page_reqRaw(::grpc::ClientContext* context, const ::communicate::Ack& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::communicate::Ack>* Asyncrecv_var_nodeRaw(::grpc::ClientContext* context, const ::communicate::Var_Ds_Info& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::communicate::Ack>* PrepareAsyncrecv_var_nodeRaw(::grpc::ClientContext* context, const ::communicate::Var_Ds_Info& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::communicate::GetInfo>* Asyncrecv_state_trans_dirn_reqRaw(::grpc::ClientContext* context, const ::communicate::Node_state_info& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::communicate::GetInfo>* PrepareAsyncrecv_state_trans_dirn_reqRaw(::grpc::ClientContext* context, const ::communicate::Node_state_info& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::communicate::GetInfo>* Asyncrecv_state_trans_node_reqRaw(::grpc::ClientContext* context, const ::communicate::Node_state_info& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::communicate::GetInfo>* PrepareAsyncrecv_state_trans_node_reqRaw(::grpc::ClientContext* context, const ::communicate::Node_state_info& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::communicate::Ack>* Asyncrecv_ack_wait_dirnRaw(::grpc::ClientContext* context, const ::communicate::Node_state_info& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::communicate::Ack>* PrepareAsyncrecv_ack_wait_dirnRaw(::grpc::ClientContext* context, const ::communicate::Node_state_info& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_recv_request_;
    const ::grpc::internal::RpcMethod rpcmethod_recv_reply_;
    const ::grpc::internal::RpcMethod rpcmethod_roll_call_;
    const ::grpc::internal::RpcMethod rpcmethod_recv_page_req_;
    const ::grpc::internal::RpcMethod rpcmethod_recv_var_node_;
    const ::grpc::internal::RpcMethod rpcmethod_recv_state_trans_dirn_req_;
    const ::grpc::internal::RpcMethod rpcmethod_recv_state_trans_node_req_;
    const ::grpc::internal::RpcMethod rpcmethod_recv_ack_wait_dirn_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Distributed Mutual Exclusion Services
    virtual ::grpc::Status recv_request(::grpc::ServerContext* context, const ::communicate::ReqLock* request, ::communicate::Ack* response);
    virtual ::grpc::Status recv_reply(::grpc::ServerContext* context, const ::communicate::Ack* request, ::communicate::Ack* response);
    virtual ::grpc::Status roll_call(::grpc::ServerContext* context, const ::communicate::Ack* request, ::communicate::Ack* response);
    // Distributed Shared Memory Services
    virtual ::grpc::Status recv_page_req(::grpc::ServerContext* context, const ::communicate::Ack* request, ::communicate::Ack* response);
    virtual ::grpc::Status recv_var_node(::grpc::ServerContext* context, const ::communicate::Var_Ds_Info* request, ::communicate::Ack* response);
    virtual ::grpc::Status recv_state_trans_dirn_req(::grpc::ServerContext* context, const ::communicate::Node_state_info* request, ::communicate::GetInfo* response);
    virtual ::grpc::Status recv_state_trans_node_req(::grpc::ServerContext* context, const ::communicate::Node_state_info* request, ::communicate::GetInfo* response);
    virtual ::grpc::Status recv_ack_wait_dirn(::grpc::ServerContext* context, const ::communicate::Node_state_info* request, ::communicate::Ack* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_recv_request : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_recv_request() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_recv_request() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status recv_request(::grpc::ServerContext* context, const ::communicate::ReqLock* request, ::communicate::Ack* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestrecv_request(::grpc::ServerContext* context, ::communicate::ReqLock* request, ::grpc::ServerAsyncResponseWriter< ::communicate::Ack>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_recv_reply : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_recv_reply() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_recv_reply() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status recv_reply(::grpc::ServerContext* context, const ::communicate::Ack* request, ::communicate::Ack* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestrecv_reply(::grpc::ServerContext* context, ::communicate::Ack* request, ::grpc::ServerAsyncResponseWriter< ::communicate::Ack>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_roll_call : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_roll_call() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_roll_call() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status roll_call(::grpc::ServerContext* context, const ::communicate::Ack* request, ::communicate::Ack* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestroll_call(::grpc::ServerContext* context, ::communicate::Ack* request, ::grpc::ServerAsyncResponseWriter< ::communicate::Ack>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_recv_page_req : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_recv_page_req() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_recv_page_req() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status recv_page_req(::grpc::ServerContext* context, const ::communicate::Ack* request, ::communicate::Ack* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestrecv_page_req(::grpc::ServerContext* context, ::communicate::Ack* request, ::grpc::ServerAsyncResponseWriter< ::communicate::Ack>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_recv_var_node : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_recv_var_node() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_recv_var_node() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status recv_var_node(::grpc::ServerContext* context, const ::communicate::Var_Ds_Info* request, ::communicate::Ack* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestrecv_var_node(::grpc::ServerContext* context, ::communicate::Var_Ds_Info* request, ::grpc::ServerAsyncResponseWriter< ::communicate::Ack>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_recv_state_trans_dirn_req : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_recv_state_trans_dirn_req() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_recv_state_trans_dirn_req() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status recv_state_trans_dirn_req(::grpc::ServerContext* context, const ::communicate::Node_state_info* request, ::communicate::GetInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestrecv_state_trans_dirn_req(::grpc::ServerContext* context, ::communicate::Node_state_info* request, ::grpc::ServerAsyncResponseWriter< ::communicate::GetInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_recv_state_trans_node_req : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_recv_state_trans_node_req() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_recv_state_trans_node_req() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status recv_state_trans_node_req(::grpc::ServerContext* context, const ::communicate::Node_state_info* request, ::communicate::GetInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestrecv_state_trans_node_req(::grpc::ServerContext* context, ::communicate::Node_state_info* request, ::grpc::ServerAsyncResponseWriter< ::communicate::GetInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_recv_ack_wait_dirn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_recv_ack_wait_dirn() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_recv_ack_wait_dirn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status recv_ack_wait_dirn(::grpc::ServerContext* context, const ::communicate::Node_state_info* request, ::communicate::Ack* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestrecv_ack_wait_dirn(::grpc::ServerContext* context, ::communicate::Node_state_info* request, ::grpc::ServerAsyncResponseWriter< ::communicate::Ack>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_recv_request<WithAsyncMethod_recv_reply<WithAsyncMethod_roll_call<WithAsyncMethod_recv_page_req<WithAsyncMethod_recv_var_node<WithAsyncMethod_recv_state_trans_dirn_req<WithAsyncMethod_recv_state_trans_node_req<WithAsyncMethod_recv_ack_wait_dirn<Service > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_recv_request : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_recv_request() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::communicate::ReqLock, ::communicate::Ack>(
          [this](::grpc::ServerContext* context,
                 const ::communicate::ReqLock* request,
                 ::communicate::Ack* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->recv_request(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_recv_request() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status recv_request(::grpc::ServerContext* context, const ::communicate::ReqLock* request, ::communicate::Ack* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void recv_request(::grpc::ServerContext* context, const ::communicate::ReqLock* request, ::communicate::Ack* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_recv_reply : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_recv_reply() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::communicate::Ack, ::communicate::Ack>(
          [this](::grpc::ServerContext* context,
                 const ::communicate::Ack* request,
                 ::communicate::Ack* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->recv_reply(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_recv_reply() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status recv_reply(::grpc::ServerContext* context, const ::communicate::Ack* request, ::communicate::Ack* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void recv_reply(::grpc::ServerContext* context, const ::communicate::Ack* request, ::communicate::Ack* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_roll_call : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_roll_call() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::communicate::Ack, ::communicate::Ack>(
          [this](::grpc::ServerContext* context,
                 const ::communicate::Ack* request,
                 ::communicate::Ack* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->roll_call(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_roll_call() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status roll_call(::grpc::ServerContext* context, const ::communicate::Ack* request, ::communicate::Ack* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void roll_call(::grpc::ServerContext* context, const ::communicate::Ack* request, ::communicate::Ack* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_recv_page_req : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_recv_page_req() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::communicate::Ack, ::communicate::Ack>(
          [this](::grpc::ServerContext* context,
                 const ::communicate::Ack* request,
                 ::communicate::Ack* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->recv_page_req(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_recv_page_req() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status recv_page_req(::grpc::ServerContext* context, const ::communicate::Ack* request, ::communicate::Ack* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void recv_page_req(::grpc::ServerContext* context, const ::communicate::Ack* request, ::communicate::Ack* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_recv_var_node : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_recv_var_node() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::communicate::Var_Ds_Info, ::communicate::Ack>(
          [this](::grpc::ServerContext* context,
                 const ::communicate::Var_Ds_Info* request,
                 ::communicate::Ack* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->recv_var_node(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_recv_var_node() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status recv_var_node(::grpc::ServerContext* context, const ::communicate::Var_Ds_Info* request, ::communicate::Ack* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void recv_var_node(::grpc::ServerContext* context, const ::communicate::Var_Ds_Info* request, ::communicate::Ack* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_recv_state_trans_dirn_req : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_recv_state_trans_dirn_req() {
      ::grpc::Service::experimental().MarkMethodCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ::communicate::Node_state_info, ::communicate::GetInfo>(
          [this](::grpc::ServerContext* context,
                 const ::communicate::Node_state_info* request,
                 ::communicate::GetInfo* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->recv_state_trans_dirn_req(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_recv_state_trans_dirn_req() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status recv_state_trans_dirn_req(::grpc::ServerContext* context, const ::communicate::Node_state_info* request, ::communicate::GetInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void recv_state_trans_dirn_req(::grpc::ServerContext* context, const ::communicate::Node_state_info* request, ::communicate::GetInfo* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_recv_state_trans_node_req : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_recv_state_trans_node_req() {
      ::grpc::Service::experimental().MarkMethodCallback(6,
        new ::grpc::internal::CallbackUnaryHandler< ::communicate::Node_state_info, ::communicate::GetInfo>(
          [this](::grpc::ServerContext* context,
                 const ::communicate::Node_state_info* request,
                 ::communicate::GetInfo* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->recv_state_trans_node_req(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_recv_state_trans_node_req() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status recv_state_trans_node_req(::grpc::ServerContext* context, const ::communicate::Node_state_info* request, ::communicate::GetInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void recv_state_trans_node_req(::grpc::ServerContext* context, const ::communicate::Node_state_info* request, ::communicate::GetInfo* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_recv_ack_wait_dirn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_recv_ack_wait_dirn() {
      ::grpc::Service::experimental().MarkMethodCallback(7,
        new ::grpc::internal::CallbackUnaryHandler< ::communicate::Node_state_info, ::communicate::Ack>(
          [this](::grpc::ServerContext* context,
                 const ::communicate::Node_state_info* request,
                 ::communicate::Ack* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->recv_ack_wait_dirn(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_recv_ack_wait_dirn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status recv_ack_wait_dirn(::grpc::ServerContext* context, const ::communicate::Node_state_info* request, ::communicate::Ack* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void recv_ack_wait_dirn(::grpc::ServerContext* context, const ::communicate::Node_state_info* request, ::communicate::Ack* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_recv_request<ExperimentalWithCallbackMethod_recv_reply<ExperimentalWithCallbackMethod_roll_call<ExperimentalWithCallbackMethod_recv_page_req<ExperimentalWithCallbackMethod_recv_var_node<ExperimentalWithCallbackMethod_recv_state_trans_dirn_req<ExperimentalWithCallbackMethod_recv_state_trans_node_req<ExperimentalWithCallbackMethod_recv_ack_wait_dirn<Service > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_recv_request : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_recv_request() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_recv_request() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status recv_request(::grpc::ServerContext* context, const ::communicate::ReqLock* request, ::communicate::Ack* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_recv_reply : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_recv_reply() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_recv_reply() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status recv_reply(::grpc::ServerContext* context, const ::communicate::Ack* request, ::communicate::Ack* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_roll_call : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_roll_call() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_roll_call() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status roll_call(::grpc::ServerContext* context, const ::communicate::Ack* request, ::communicate::Ack* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_recv_page_req : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_recv_page_req() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_recv_page_req() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status recv_page_req(::grpc::ServerContext* context, const ::communicate::Ack* request, ::communicate::Ack* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_recv_var_node : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_recv_var_node() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_recv_var_node() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status recv_var_node(::grpc::ServerContext* context, const ::communicate::Var_Ds_Info* request, ::communicate::Ack* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_recv_state_trans_dirn_req : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_recv_state_trans_dirn_req() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_recv_state_trans_dirn_req() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status recv_state_trans_dirn_req(::grpc::ServerContext* context, const ::communicate::Node_state_info* request, ::communicate::GetInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_recv_state_trans_node_req : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_recv_state_trans_node_req() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_recv_state_trans_node_req() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status recv_state_trans_node_req(::grpc::ServerContext* context, const ::communicate::Node_state_info* request, ::communicate::GetInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_recv_ack_wait_dirn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_recv_ack_wait_dirn() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_recv_ack_wait_dirn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status recv_ack_wait_dirn(::grpc::ServerContext* context, const ::communicate::Node_state_info* request, ::communicate::Ack* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_recv_request : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_recv_request() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_recv_request() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status recv_request(::grpc::ServerContext* context, const ::communicate::ReqLock* request, ::communicate::Ack* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestrecv_request(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_recv_reply : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_recv_reply() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_recv_reply() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status recv_reply(::grpc::ServerContext* context, const ::communicate::Ack* request, ::communicate::Ack* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestrecv_reply(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_roll_call : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_roll_call() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_roll_call() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status roll_call(::grpc::ServerContext* context, const ::communicate::Ack* request, ::communicate::Ack* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestroll_call(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_recv_page_req : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_recv_page_req() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_recv_page_req() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status recv_page_req(::grpc::ServerContext* context, const ::communicate::Ack* request, ::communicate::Ack* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestrecv_page_req(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_recv_var_node : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_recv_var_node() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_recv_var_node() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status recv_var_node(::grpc::ServerContext* context, const ::communicate::Var_Ds_Info* request, ::communicate::Ack* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestrecv_var_node(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_recv_state_trans_dirn_req : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_recv_state_trans_dirn_req() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_recv_state_trans_dirn_req() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status recv_state_trans_dirn_req(::grpc::ServerContext* context, const ::communicate::Node_state_info* request, ::communicate::GetInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestrecv_state_trans_dirn_req(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_recv_state_trans_node_req : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_recv_state_trans_node_req() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_recv_state_trans_node_req() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status recv_state_trans_node_req(::grpc::ServerContext* context, const ::communicate::Node_state_info* request, ::communicate::GetInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestrecv_state_trans_node_req(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_recv_ack_wait_dirn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_recv_ack_wait_dirn() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_recv_ack_wait_dirn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status recv_ack_wait_dirn(::grpc::ServerContext* context, const ::communicate::Node_state_info* request, ::communicate::Ack* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestrecv_ack_wait_dirn(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_recv_request : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_recv_request() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->recv_request(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_recv_request() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status recv_request(::grpc::ServerContext* context, const ::communicate::ReqLock* request, ::communicate::Ack* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void recv_request(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_recv_reply : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_recv_reply() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->recv_reply(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_recv_reply() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status recv_reply(::grpc::ServerContext* context, const ::communicate::Ack* request, ::communicate::Ack* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void recv_reply(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_roll_call : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_roll_call() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->roll_call(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_roll_call() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status roll_call(::grpc::ServerContext* context, const ::communicate::Ack* request, ::communicate::Ack* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void roll_call(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_recv_page_req : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_recv_page_req() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->recv_page_req(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_recv_page_req() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status recv_page_req(::grpc::ServerContext* context, const ::communicate::Ack* request, ::communicate::Ack* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void recv_page_req(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_recv_var_node : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_recv_var_node() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->recv_var_node(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_recv_var_node() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status recv_var_node(::grpc::ServerContext* context, const ::communicate::Var_Ds_Info* request, ::communicate::Ack* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void recv_var_node(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_recv_state_trans_dirn_req : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_recv_state_trans_dirn_req() {
      ::grpc::Service::experimental().MarkMethodRawCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->recv_state_trans_dirn_req(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_recv_state_trans_dirn_req() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status recv_state_trans_dirn_req(::grpc::ServerContext* context, const ::communicate::Node_state_info* request, ::communicate::GetInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void recv_state_trans_dirn_req(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_recv_state_trans_node_req : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_recv_state_trans_node_req() {
      ::grpc::Service::experimental().MarkMethodRawCallback(6,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->recv_state_trans_node_req(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_recv_state_trans_node_req() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status recv_state_trans_node_req(::grpc::ServerContext* context, const ::communicate::Node_state_info* request, ::communicate::GetInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void recv_state_trans_node_req(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_recv_ack_wait_dirn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_recv_ack_wait_dirn() {
      ::grpc::Service::experimental().MarkMethodRawCallback(7,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->recv_ack_wait_dirn(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_recv_ack_wait_dirn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status recv_ack_wait_dirn(::grpc::ServerContext* context, const ::communicate::Node_state_info* request, ::communicate::Ack* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void recv_ack_wait_dirn(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_recv_request : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_recv_request() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::communicate::ReqLock, ::communicate::Ack>(std::bind(&WithStreamedUnaryMethod_recv_request<BaseClass>::Streamedrecv_request, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_recv_request() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status recv_request(::grpc::ServerContext* context, const ::communicate::ReqLock* request, ::communicate::Ack* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedrecv_request(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::communicate::ReqLock,::communicate::Ack>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_recv_reply : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_recv_reply() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::communicate::Ack, ::communicate::Ack>(std::bind(&WithStreamedUnaryMethod_recv_reply<BaseClass>::Streamedrecv_reply, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_recv_reply() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status recv_reply(::grpc::ServerContext* context, const ::communicate::Ack* request, ::communicate::Ack* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedrecv_reply(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::communicate::Ack,::communicate::Ack>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_roll_call : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_roll_call() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::communicate::Ack, ::communicate::Ack>(std::bind(&WithStreamedUnaryMethod_roll_call<BaseClass>::Streamedroll_call, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_roll_call() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status roll_call(::grpc::ServerContext* context, const ::communicate::Ack* request, ::communicate::Ack* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedroll_call(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::communicate::Ack,::communicate::Ack>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_recv_page_req : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_recv_page_req() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::communicate::Ack, ::communicate::Ack>(std::bind(&WithStreamedUnaryMethod_recv_page_req<BaseClass>::Streamedrecv_page_req, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_recv_page_req() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status recv_page_req(::grpc::ServerContext* context, const ::communicate::Ack* request, ::communicate::Ack* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedrecv_page_req(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::communicate::Ack,::communicate::Ack>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_recv_var_node : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_recv_var_node() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::communicate::Var_Ds_Info, ::communicate::Ack>(std::bind(&WithStreamedUnaryMethod_recv_var_node<BaseClass>::Streamedrecv_var_node, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_recv_var_node() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status recv_var_node(::grpc::ServerContext* context, const ::communicate::Var_Ds_Info* request, ::communicate::Ack* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedrecv_var_node(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::communicate::Var_Ds_Info,::communicate::Ack>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_recv_state_trans_dirn_req : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_recv_state_trans_dirn_req() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::communicate::Node_state_info, ::communicate::GetInfo>(std::bind(&WithStreamedUnaryMethod_recv_state_trans_dirn_req<BaseClass>::Streamedrecv_state_trans_dirn_req, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_recv_state_trans_dirn_req() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status recv_state_trans_dirn_req(::grpc::ServerContext* context, const ::communicate::Node_state_info* request, ::communicate::GetInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedrecv_state_trans_dirn_req(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::communicate::Node_state_info,::communicate::GetInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_recv_state_trans_node_req : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_recv_state_trans_node_req() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::communicate::Node_state_info, ::communicate::GetInfo>(std::bind(&WithStreamedUnaryMethod_recv_state_trans_node_req<BaseClass>::Streamedrecv_state_trans_node_req, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_recv_state_trans_node_req() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status recv_state_trans_node_req(::grpc::ServerContext* context, const ::communicate::Node_state_info* request, ::communicate::GetInfo* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedrecv_state_trans_node_req(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::communicate::Node_state_info,::communicate::GetInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_recv_ack_wait_dirn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_recv_ack_wait_dirn() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::communicate::Node_state_info, ::communicate::Ack>(std::bind(&WithStreamedUnaryMethod_recv_ack_wait_dirn<BaseClass>::Streamedrecv_ack_wait_dirn, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_recv_ack_wait_dirn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status recv_ack_wait_dirn(::grpc::ServerContext* context, const ::communicate::Node_state_info* request, ::communicate::Ack* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedrecv_ack_wait_dirn(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::communicate::Node_state_info,::communicate::Ack>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_recv_request<WithStreamedUnaryMethod_recv_reply<WithStreamedUnaryMethod_roll_call<WithStreamedUnaryMethod_recv_page_req<WithStreamedUnaryMethod_recv_var_node<WithStreamedUnaryMethod_recv_state_trans_dirn_req<WithStreamedUnaryMethod_recv_state_trans_node_req<WithStreamedUnaryMethod_recv_ack_wait_dirn<Service > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_recv_request<WithStreamedUnaryMethod_recv_reply<WithStreamedUnaryMethod_roll_call<WithStreamedUnaryMethod_recv_page_req<WithStreamedUnaryMethod_recv_var_node<WithStreamedUnaryMethod_recv_state_trans_dirn_req<WithStreamedUnaryMethod_recv_state_trans_node_req<WithStreamedUnaryMethod_recv_ack_wait_dirn<Service > > > > > > > > StreamedService;
};

}  // namespace communicate


#endif  // GRPC_communicate_2eproto__INCLUDED
